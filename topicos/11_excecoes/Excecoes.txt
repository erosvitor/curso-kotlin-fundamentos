====================================================================================================
CURSO FUNDAMENTOS KOTLIN - EXCEÇÕES
====================================================================================================


Introdução
---------------------------------------------------------------------------------------------------- 
Uma exceção é um comportamento inexperado que ocorre durante a execução de um programa de computador
quando algo não planejado ocorre.

Possíveis causas de exceções:
- Entrada de dados inválida
- Conversão de dados inválida
- Manipulação de arquivos inexistentes
- Falta de permissão para escrever em diretório
- Queda servidor do banco de dados 


Tratando exceções
---------------------------------------------------------------------------------------------------- 
A linguagem Kotlin disponibiliza o bloco de comando 'try..catch' para capturar e tratar exceções.

Sintaxe:

  try {
    <comandos>
  } catch (e: <exception>) {
    <tratamento-excecao>
  } 


Exemplo:

fun main() {

    val numeroStr = "aa"
    try {
        val numero = numeroStr.toInt()
    } catch (e: Exception) {
        println("Número inválido")
    }

}


Tratando exceções específicas
---------------------------------------------------------------------------------------------------- 
Durante a execução de um bloco de comandos é possível que ocorre mais de uma exceção. Para tratar de
forma específica uma determinada exceção é necessário informar o nome da exceção no lugar da exceção
genérica Exception.

Exceções mais conhecidas:
- NumberFormatException: ocorre na conversão de dados
- ZeroDivisionError: ocorre quando o divisor é igual a ZERO
- NameError: ocorre quando uma variável não inicializada é utilizada


fun main() {

    var n1 = "aa"
    var n2 = 0

    try {
        var resultado = Integer.parseInt(n1) / n2
    } catch (e: NumberFormatException) {
        println("Número inválido")
    }

}


Para tratar mais de uma exceção e executar uma ação para cada uma delas, é necessário relacionais as
exceções no bloco catch conforme mostra o programa abaixo.

fun main() {

    val n1 = "10"
    val n2 = 0

    try {
        var resultado = n1.toInt() / n2
    } catch (e: NumberFormatException) {
        println("Número inválido")
    } catch (e: ArithmeticException) {
        println("Divisor não pode ser zero")
    }

}


Bloco Finally
---------------------------------------------------------------------------------------------------- 
Muitas vezes precisamos que um determinado bloco de comandos seja executado independente se ocorreu
ou não uma exceção. Isto é feito utilizando o bloco 'finally' do comando try..catch


fun main() {

    val salarioStr = "aa"

    try {
        val salario = salarioStr.toFloat()
    } catch (e: NumberFormatException) {
        println("Valor inválido")
    } finally {
        println("Este comando sempre será executado")
    }

}

